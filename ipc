 ALGORITHM:
Server:
	•	Start
	•	Initialize a shared memory identifier, key and pointers shm and s.
	•	Create a shared memory segment using shmget.
	•	If return value is less than 0 (i.e. -1), call die() and then stop.
	•	Attach server process to the shared memory using shmat.
	•	If pointer to the shared memory is not obtained, call die() and then stop.
	•	Using a for loop, write all the characters from a-z on the shared memory.
	•	Stop


Client:
	•	Start
	•	Initialize a shared memory identifier, key and pointers shm and s.
	•	Gain access to same shared memory using key.
	•	If return value is less than 0 (i.e. -1), call die() and then stop.
	•	Attach client process to the shared memory using shmat.
	•	If pointer to the shared memory is not obtained, call die() and then stop.
	•	Print the contents of the shared memory
	•	After completion of reading, change first character to ‘*’
	•	Stop


CODE:
//SHMServer.C #include
<sys/types.h> #include <sys/ipc.h> #include
<sys/shm.h> #include <stdio.h> #include <stdlib.h>

#define MAXSIZE 27

void die(char *s)
{
perror(s
);
exit(1);
}

int main()
{
char c;
int shmid; key_t key; char *shm, *s;

key = 5678;

if ((shmid = shmget(key, MAXSIZE, IPC_CREAT | 0666))
< 0) die("shmget");

if ((shm = shmat(shmid, NULL, 0)) == (char *)
-1) die("shmat");

/*
	•	* Put some things into the memory for the
	•	other process to read.
*	*/
s = shm;

for (c = 'a'; c <= 'z'; c++)
*s++ = c;

/*
	•	Wait until the other process
	•	changes the first character of our memory
	•	to '*', indicating that it has read what
	•	we put there.
*/
while (*shm != '*') sleep(1);

exit(0);
}


//SHMClient.C

#include
<sys/types.h> #include <sys/ipc.h> #include
<sys/shm.h>

#include <stdio.h> #include <stdlib.h> #define MAXSIZE 27

void die(char *s)
{
perror(s
);
exit(1);
}

int main()
{
int shmid; key_t key; char *shm, *s;

key = 5678;

if ((shmid = shmget(key, MAXSIZE, 0666))
< 0) die("shmget");

if ((shm = shmat(shmid, NULL, 0)) == (char *)
-1) die("shmat");

//Now read what the server put in the memory. for (s = shm; *s != '\0'; s++)
putchar(*s)
;
putchar('\n');

/*
*Change the first character of the
*segment to '*', indicating we have read
*the segment.
*/
*shm = '*';
exit(0);
}
